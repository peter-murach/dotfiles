" This is vimrc for vim/gvim
" This file contains main configuration settings
" to aid in comfortable and productive programming
" written by Piotr Murach

set nocompatible

" Pathogen runtime path manipulation, all plugin paths stored in runtimepath
call pathogen#infect()

"""""""""""""""""""
" System-wide setup
"""""""""""""""""""
set number           " Show line numbers.
set showmode         " Show what mode we are currently in
set ruler            " Show cursor position.
set scrolloff=3      " Minimum lines to keep around cursor
set shiftwidth=2     " I like 2 spaces for indenting
set tabstop=2        " Set 2 stops
set expandtab        " Spaces instead of tabs
set autoindent       " Always set autoindenting on
set wrap             " Turn on line wrapping.
set visualbell       " No beeping.
set listchars=tab:»·,trail:· " Enable list/listchars
set showbreak=↪      " Mark wrapped lines
set list
set incsearch        " Highlight matches as you type.
set smartcase        " Ignore cases when searching
set showmatch        " Show matching parenthesis
set hlsearch         " Show all matches
set lazyredraw       " Do not redraw while running macros
set enc=utf-8        " Enable unicode support
set history=1000     " Remember more command and search history
set undolevels=1000
set hidden           " Hide buffers instead of closing them
set title            " Change the terminal's title
set ttimeoutlen=50   " Make Esc work faster
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y%*%=%-14.(%l,%c%V%)\ %P
set laststatus=2     " Always show status line
set cursorline       " Highlight the current line
set shiftround       " Round spaces motions
set noesckeys        " Get rid of the delay when hitting esc
set nrformats=       " Treat numerals as decimal
set synmaxcol=800    " Don't try to highlight lines longer than 800 chars

" Completion
set wildmenu         " Make tab completion for files/buffers act like bash
set wildmode=list:longest,full "Show a list when pressing tab, and complete first match
set wildignore+=.git,.svn                     " Version control
set wildignore+=*.zip,*.tar                   " Compressed files
set wildignore+=*.avi,*.wmv,*.ogg,*.mp3,*.mov " Video files
set wildignore+=*.jpg,*.gif,*.png             " Binary images
set wildignore+=*.sw?                         " Vim swap files
set completeopt=menu,menuone,longest,preview

" Folding
set nofoldenable      " Turn off folding
set foldmethod=syntax " Usefull options: indent, syntax, marker, expr
set foldcolumn=1      " Creates a smalll left-hand gutter for displaying fold info
set foldlevel=100
hi Folded cterm=bold ctermfg=grey ctermbg=none
hi FoldColumn cterm=bold ctermfg=grey ctermbg=none

augroup cline
  au!
  au WinLeave,InsertEnter * set nocursorline
  au WinEnter,InsertLeave * set cursorline
augroup END

syntax enable        " Turn on syntax highlightning
set background=dark
colorscheme desert   " Pick current color scheme

""""""""""""
" Mappings
""""""""""""
let mapleader=","    " Change the mapleader from \ to ,

" Mappings for often mistyped :w as :W
nmap :W :w
nmap :W! :w!
nmap :Q! :q!
nmap :Wq! :wq!
nmap :WQ! :wq!

nmap k gk
nmap j gj

" Toggle paste
nnoremap <leader>p :set paste!<cr>

" Easy list traversal
nnoremap <silent> [b :bprevious<cr>
nnoremap <silent> ]b :bnext<cr>
nnoremap <silent> [B :bfirst<cr>
nnoremap <silent> ]B :blast<cr>

" Editing
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Tab mappings
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove
map <leader>[  :tabprevious<cr>
map <leader>]  :tabnext<cr>

" Shortcuts for Rails commands
autocmd User Rails Rnavcommand step   features/step_definitions -glob=**/* -suffix=_steps.rb
autocmd User Rails Rnavcommand config config                    -glob=**/* -default=routes
command! Rroutes :e config/routes.rb

map <leader>rm :Rmodel<space>
map <leader>rc :Rcontroller<space>
map <leader>rv :Rview<space>
map <leader>rh :Rhelper<space>
map <leader>rs :Rspec<space>
map <leader>ri :Rinitializer<space>
map <leader>rj :Rjavascript<space>
map <leader>ry :Rstylesheet<space>
map <leader>rl :Rlayout<space>
map <leader>mi :Rmigration<space>
map <leader>re :Rextract<space>
map <leader>rp :Rstep<cr>
map <leader>sc :sp db/schema.rb<cr>
map <leader>n  :NERDTreeToggle<cr>
map <leader>o :call RunCurrentLineInTest()<cr>
map <leader>y :call RunCurrentTest()<cr>
map <leader>u :call RunAllTests()<cr>

" Shortcuts for Backbone.js
autocmd User Rails Rnavcommand template    app/assets/templates                -glob=**/* -suffix=.jst.ejs
autocmd User Rails Rnavcommand jmodel      app/assets/javascripts/models       -glob=**/* -suffix=.coffee
autocmd User Rails Rnavcommand jview       app/assets/javascripts/views        -glob=**/* -suffix=.coffee
autocmd User Rails Rnavcommand jcollection app/assets/javascripts/collections  -glob=**/* -suffix=.coffee
autocmd User Rails Rnavcommand jrouter     app/assets/javascripts/routers      -glob=**/* -suffix=.coffee
autocmd User Rails Rnavcommand jspec       spec/javascripts                    -glob=**/* -suffix=.coffee

map <leader>jt :Rtemplate<space>
map <leader>jm :Rjmodel<space>
map <leader>jv :Rjview<space>
map <leader>jc :Rjcollection<space>
map <leader>jr :Rjrouter<space>
map <leader>js :Rjspec<space>

" Shortcuts for alignment
if exists(":Tabularize")
  nmap <leader>a= :Tabularize /=<cr>
  vmap <leader>a= :Tabularize /=<cr>
  nmap <leader>a{ :Tabularize /{<cr>
  vmap <leader>a{ :Tabularize /{<cr>
  nmap <leader>a: :Tabularize /:\zs<cr>
  vmap <leader>a: :Tabularize /:\zs<cr>
endif

" Shortcuts for git
map <leader>ga :Gadd<cr>
map <leader>gb :Gblame<cr>
map <leader>gc :Gcommit -m ""<left>
map <leader>gd :Gdiff<cr>
map <leader>gm :Gmove<cr>
map <leader>gr :Gremove<cr>
map <leader>gs :Gstatus<cr>
map <leader>gw :Gwrite<cr>
vmap <leader>b :<C-U>!git blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>

" Begin searching with ack
map <leader>f :Ack<space>

" No more accidents with Help
nmap <F1> <Esc>
map! <F1> <Esc>

cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e  :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%
map <leader>v  :view %%

" Auto commands
if has("autocmd")
  " Include these in an autocmd group for easy delition
  augroup vimrcEx
    " Jump to last cursor position
    autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal g`\"" |
            \ endif
    " Leave return key alone when in command line mode
    autocmd! CmdWinEnter * :unmap <cr>
    autocmd! CmdWinLeave * :call MapCR()
  augroup END

  augroup myfiletypes
    " treat rackup files like ruby
    au BufRead,BufNewFile *.ru set ft=ruby
    au BufRead,BufNewFile Gemfile set ft=ruby
  augroup END
endif

""""""""""
" Scripts
""""""""""

" Clear the search buffer when hitting return
function! MapCR()
  nnoremap <CR> :nohlsearch<cr>
endfunction
call MapCR()

function! CorrectTestRunner()
  if expand('%') =~# '\.feature$'
    return "cucumber -r features"
  elseif expand('%') =~# '_spec\.rb$'
    return "rspec"
  else
    return "ruby -Itest"
  endif
endfunction

function! InTestFile()
  return match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\)$') != -1
endfunction

function! RunAllTests()
  let l:test = ''
  call SetLastTestCommand(l:test)
  call RunTests(l:test)
endfunction

function! RunCurrentTest()
  if InTestFile()
    let l:test = @%
    call SetLastTestCommand(l:test)
    call RunTests(l:test)
  else
    call RunLastTest()
  endif
endfunction

function! RunCurrentLineInTest()
  let l:test = @% . ":" . line(".")
  call SetLastTestCommand(l:test)
  call RunTests(l:test)
endfunction

function! RunLastTest()
  if exists("s:last_test_cmd")
    call RunTests(s:last_test_cmd)
  endif
endfunction

function! SetLastTestCommand(test)
  let s:last_test_cmd = a:test
endfunction

function! RunWithBundler()
  l:file = 'Gemfile'
  if filereadable(l:file)
    return "bundle exec "
  endif
  return ''
endfunction

function! RunTests(test)
  if !empty(expand("%"))
    write
  endif
  exec "!" . RunWithBundler() . CorrectTestRunner() . " " . a:test
endfunction
